from cv_bridge import CvBridge
from std_msgs.msg import Float64MultiArray
import rclpy
import math
from warnings import catch_warnings
import cv2
from geometry_msgs.msg import Twist
from tf2_ros.buffer import Buffer
import rclpy
from rclpy.node import Node

from tf2_ros import TransformException
from tf2_ros.buffer import Buffer
from tf2_ros.transform_listener import TransformListener

from turtlesim.srv import Spawn
from geometry_msgs.msg import Pose2D, TwistStamped
from tf2_geometry_msgs import PointStamped
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from std_msgs.msg import Float64MultiArray
import image_geometry
import tf2_ros
import tf2_geometry_msgs
from sensor_msgs.msg import CameraInfo
from tf2_geometry_msgs import Vector3Stamped
from tf2_ros import TransformBroadcaster
from geometry_msgs.msg import TransformStamped


qos_policy = rclpy.qos.QoSProfile(reliability=rclpy.qos.ReliabilityPolicy.BEST_EFFORT,
                                          history=rclpy.qos.HistoryPolicy.KEEP_LAST,
                                          depth=1)

class MyNode(Node):

    def __init__(self):
        super().__init__('turtle_tf2_frame_listener')
        
        self.pub2 = self.create_publisher(Float64MultiArray, '/servo_controller/commands', 10)
        self.subscription = self.create_subscription(
            Image,
            '/camera_name2/image_raw',
            self.image_callback,
            qos_policy)
            
        self.bridge = CvBridge()
        
        self.subscription = self.create_subscription(
            CameraInfo,
            '/camera_name2/camera_info',
            self.camera_info_callback,
            10)
        self.tf_buffer = Buffer()
        self.tf_listener = TransformListener(self.tf_buffer, self)
        
        print('Running')
        self.pos = 0
        self.model = image_geometry.PinholeCameraModel()
        #self.pub = self.create_publisher(TwistStamped, '/diff_drive_controller/cmd_vel', 10)
        self.pubGoal = self.create_publisher(Pose2D, 'goal', 10)
        self.pubAng = self.create_publisher(Float64MultiArray, '/servo_controller/commands', 10)
        #self.tf_static_broadcaster = StaticTransformBroadcaster(self)
        self.broadcaster = TransformBroadcaster(self)
 
    def camera_info_callback(self, msg):
        #print("Got camera info")
        self.model.fromCameraInfo(msg)
        
        
    def image_callback(self, msg):
        print("Cheogou aqui")
        cv_image = cv2.cvtColor(self.bridge.imgmsg_to_cv2(msg), cv2.COLOR_BGR2RGB)
        
        img = cv2.cvtColor(cv_image, cv2.COLOR_BGR2HSV)
        
        img2 = cv2.inRange(img, ( 0, 200, 50),
		(40, 255, 255))
        #cv2.imshow('segmented',img2)
        #cv2.imshow('hsv',img)
        #cv2.imshow('rgb',cv_image)
        #cv2.waitKey(1)

        m = cv2.moments(img2)
        if m['m00'] == 0: 
            return
        cx = m['m10']/m['m00']
        cy = m['m01']/m['m00']
        
        ma  = Float64MultiArray()
        h = img2.shape[1]/2
        de = h-cx
        self.pos += 0.0001*de
        ma.data = [self.pos]
        self.pubAng.publish(ma)
        
        print("angle: ", self.pos)
        
        left, top, width, height = cv2.boundingRect(img2)
        base = top + height
        
        line = self.model.projectPixelTo3dRay((cx,base))
        ps = PointStamped() 
        ps.header.frame_id = 'camera_link'
        ps.point.x = 0.0
        ps.point.y = 0.0
        ps.point.z = 0.0
 
        l2 = Vector3Stamped()
        l2.header.frame_id = 'camera_link'
        l2.vector.x = line[0]
        l2.vector.y = line[1]
        l2.vector.z = line[2]
        try:
            l2 = self.tf_buffer.transform(l2, "odom")
            ps = self.tf_buffer.transform(ps, "odom")
        except Exception as e:
            print("Ocorru um erro: " + str(e))
            return
        k = -ps.point.z / l2.vector.z
        vx = ps.point.x + (l2.vector.x)*k
        vy = ps.point.y + (l2.vector.y)*k
      
        print("goal: ", goal)
        self.pubGoal.publish(goal) 
     
        t = TransformStamped()
        t.header.frame_id = "odom"
        t.child_frame_id = "goal"
        t.transform.translation.x = vx
        t.transform.translation.y = vy
        t.transform.translation.z = 0.0
        self.broadcaster.sendTransform(t)
        goal = Pose2D()
        goal.x = vx
        goal.y = vy
        print("goal x = " + str(vx))
        print("goal y = " + str(vy))
        self.pubGoal.publish(goal) 
    
        
        
def main(args=None):
    rclpy.init(args=args)
    my_node = MyNode()
    rclpy.spin(my_node)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    my_node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
